/**
 * @fileoverview Firestore Security Rules for ParkSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data (profiles, payment methods)
 * and a public-read, owner-write model for parking lot data. Bookings are accessible only to
 * the associated user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /parking_lots/{parkingLotId}: Stores parking lot information; publicly readable but
 *   writeable only by authorized parking managers (not yet implemented).
 * - /bookings/{bookingId}: Stores booking information, accessible only to the user who created the booking.
 * - /parking_managers/{parkingManagerId}: Stores parking managers, accessible only to the manager themselves.
 * - /users/{userId}/payment_methods/{paymentMethodId}: Stores payment methods, accessible only to the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The rules are designed to be authorization-independent wherever possible, avoiding costly `get()` calls.
 * - Ambiguous relationships default to owner-only access.
 *
 * Denormalization for Authorization:
 * - The `Booking` entity includes denormalized `userId` and `parkingLotId` fields. This allows
 *   security rules to validate user access and parking lot ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for parking lot information.
     * @path /parking_lots/{parkingLotId}
     * @allow (get, list) - Any user can view parking lot information.
     * @allow (create, update, delete) - Only authorized parking managers (not yet implemented).
     * @deny (create, update, delete) - Unauthorized users cannot modify parking lot information.
     * @principle Public read access with restricted write access (future parking manager role).
     */
    match /parking_lots/{parkingLotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add parking manager validation once implemented.
    }

    /**
     * @description Enforces access control for booking information.
     * @path /bookings/{bookingId}
     * @allow (create) - Authenticated user creates a booking with their userId.
     * @allow (get, list, update, delete) - Authenticated user accesses their own booking.
     * @deny (create) - Authenticated user attempts to create a booking for another user.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's booking.
     * @principle Enforces document ownership for all operations.
     */
    match /bookings/{bookingId} {
      function isOwner(bookingId) {
        return request.auth != null && request.auth.uid == getBookingUserId();
      }
      function isExistingOwner(bookingId) {
        return request.auth.uid == getBookingUserId() && resource.data != null;
      }
      function getBookingUserId() {
          return resource.data.userId
      }

      allow get: if isOwner(bookingId);
      allow list: if request.auth.uid != null; // Allowing list if authenticated, assuming the query filters by userId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(bookingId);
      allow delete: if isExistingOwner(bookingId);
    }

    /**
     * @description Enforces access control for parking manager profiles.
     * @path /parking_managers/{parkingManagerId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched parkingManagerId.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /parking_managers/{parkingManagerId} {
      function isOwner(parkingManagerId) {
        return request.auth != null && request.auth.uid == parkingManagerId;
      }
      function isExistingOwner(parkingManagerId) {
        return isOwner(parkingManagerId) && resource.data != null;
      }

      allow get: if isOwner(parkingManagerId);
      allow list: if false;
      allow create: if isOwner(parkingManagerId);
      allow update: if isExistingOwner(parkingManagerId);
      allow delete: if isExistingOwner(parkingManagerId);
    }

    /**
     * @description Enforces access control for payment methods.
     * @path /users/{userId}/payment_methods/{paymentMethodId}
     * @allow (create) - Authenticated user creates a payment method for themselves.
     * @allow (get, list, update, delete) - Authenticated user accesses their own payment methods.
     * @deny (create) - Authenticated user attempts to create a payment method for another user.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's payment methods.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/payment_methods/{paymentMethodId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}